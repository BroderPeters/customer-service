schema {
  query: CustomerQueries
  mutation: CustomerMutations
}

type AddCustomerPayload {
  customer: Customer
  errors: [UserError!]
}

"A simple customer."
type Customer {
  "The unique Id of the customer."
  id: Long
  "The E-Mail of the customer."
  email: EmailAddress
  "The Name of the customer."
  name: NonEmptyString
  "The Code of the customer."
  code: Int
  "The Status of the customer, deterring whether he is Active or Inactive."
  status: CustomerStatus
  "Defines whether the customer is blocked."
  isBlocked: Boolean
  "The creation date and time of the customer data record in UTC."
  createdAt: DateTime
}

"A connection to a list of items."
type CustomerConnection {
  "Information to aid in pagination."
  pageInfo: PageInfo!
  "A list of edges."
  edges: [CustomerEdge!]
  "A flattened list of the nodes."
  nodes: [Customer!]
}

"An edge in a connection."
type CustomerEdge {
  "A cursor for use in pagination."
  cursor: String!
  "The item at the end of the edge."
  node: Customer!
}

type CustomerMutations {
  "Add a customer."
  addCustomer(input: AddCustomerInput!): AddCustomerPayload!
  "Update a customer."
  updateCustomer(input: UpdateCustomerInput!): UpdateCustomerPayload!
  "Delete a customer."
  deleteCustomer(input: DeleteCustomerInput!): DeleteCustomerPayload!
}

type CustomerQueries {
  "Get customers paginated."
  customers(first: Int after: String last: Int before: String): CustomerConnection
  "Get a specific customer by id."
  customer("The id to search the customer on." id: Long!): Customer
}

type DeleteCustomerPayload {
  customer: Customer
  errors: [UserError!]
}

"Information about pagination in a connection."
type PageInfo {
  "Indicates whether more edges exist following the set defined by the clients arguments."
  hasNextPage: Boolean!
  "Indicates whether more edges exist prior the set defined by the clients arguments."
  hasPreviousPage: Boolean!
  "When paginating backwards, the cursor to continue."
  startCursor: String
  "When paginating forwards, the cursor to continue."
  endCursor: String
}

type UpdateCustomerPayload {
  customer: Customer
  errors: [UserError!]
}

type UserError {
  message: String!
  code: String!
}

input AddCustomerInput {
  email: EmailAddress
  name: NonEmptyString
  code: Int
  status: CustomerStatus!
  isBlocked: Boolean!
}

input DeleteCustomerInput {
  id: Long!
}

input UpdateCustomerInput {
  id: Long!
  email: EmailAddress
  name: NonEmptyString
  code: Int
  status: CustomerStatus!
  isBlocked: Boolean!
}

"The Status of the customer, deterring whether he is active or inactive."
enum CustomerStatus {
  "The customer is active."
  ACTIVE
  "The customer is inactive."
  INACTIVE
}

"The `@defer` directive may be provided for fragment spreads and inline fragments to inform the executor to delay the execution of the current fragment to indicate deprioritization of the current fragment. A query with `@defer` directive will cause the request to potentially return multiple responses, where non-deferred data is delivered in the initial response and data deferred is delivered in a subsequent response. `@include` and `@skip` take precedence over `@defer`."
directive @defer("If this argument label has a value other than null, it will be passed on to the result of this defer directive. This label is intended to give client applications a way to identify to which fragment a deferred result belongs to." label: String "Deferred when true." if: Boolean) on FRAGMENT_SPREAD | INLINE_FRAGMENT

"The `@specifiedBy` directive is used within the type system definition language to provide a URL for specifying the behavior of custom scalar definitions."
directive @specifiedBy("The specifiedBy URL points to a human-readable specification. This field will only read a result for scalar types." url: String!) on SCALAR

"The `@stream` directive may be provided for a field of `List` type so that the backend can leverage technology such as asynchronous iterators to provide a partial list in the initial response, and additional list items in subsequent responses. `@include` and `@skip` take precedence over `@stream`."
directive @stream("If this argument label has a value other than null, it will be passed on to the result of this stream directive. This label is intended to give client applications a way to identify to which fragment a streamed result belongs to." label: String "The initial elements that shall be send down to the consumer." initialCount: Int! "Streamed when true." if: Boolean!) on FIELD

"The `DateTime` scalar represents an ISO-8601 compliant date time type."
scalar DateTime @specifiedBy(url: "https:\/\/www.graphql-scalars.com\/date-time")

"The EmailAddress scalar type constitutes a valid email address, represented as a UTF-8 character sequence. The scalar follows the specification defined by the HTML Spec https:\/\/html.spec.whatwg.org\/multipage\/input.html#valid-e-mail-address."
scalar EmailAddress

"The `Long` scalar type represents non-fractional signed whole 64-bit numeric values. Long can represent values between -(2^63) and 2^63 - 1."
scalar Long

"The NonEmptyString scalar type represents non empty textual data, represented as UTF‐8 character sequences with at least one character"
scalar NonEmptyString
